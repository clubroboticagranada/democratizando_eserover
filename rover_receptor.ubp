module main
author unknown
version 1 0 
description ''
variables mensaje 

script 174 50 {
whenStarted
Setup 0 1
'[radio:setPower]' 4
'[radio:setGroup]' 5
}

script 668 106 {
whenCondition ('[radio:messageReceived]')
mensaje = ('[radio:receivedString]')
if (mensaje == 'f') {
  move 'f' 6
} (mensaje == 'b') {
  move 'b' 6
} (mensaje == 'r') {
  move 'r' 6
} (mensaje == 'l') {
  move 'l' 6
} (mensaje == 's') {
  move 'f' 0
}
mensaje = 's'
}


module Eserover2M
author 'por Pedro Ruiz'
version 1 0 
depends Servo 
description ''
variables pinRightRover pinLeftRover 

  spec ' ' 'move' 'move action _ velocity _' 'auto auto' '' '10'
  spec ' ' 'Setup' 'Setup pins left _ right _' 'auto auto' '' ''

to Setup pinL pinR {
  pinLeftRover = pinL
  pinRightRover = pinR
}

to move action velocity {
  if (action == 'f') {
    local 'direction0' -1
    local 'direction1' 1
  } (action == 'b') {
    local 'direction0' 1
    local 'direction1' -1
  } (action == 'r') {
    local 'direction0' -1
    local 'direction1' -1
  } (action == 'l') {
    local 'direction0' 1
    local 'direction1' 1
  }
  setServoAngle pinLeftRover (('[misc:rescale]' velocity 0 10 0 90) * direction0)
  setServoAngle pinRightRover (('[misc:rescale]' velocity 0 10 0 90) * direction1)
}


module Radio Comm
author MicroBlocks
version 1 2 
tags radio communication messaging network 
description 'Send and receive messages between micro:bit boards via their built-in radio system.'

  spec ' ' '[radio:sendInteger]' 'radio send number _' 'num' 123
  spec ' ' '[radio:sendString]' 'radio send string _' 'str' 'Hello!'
  spec ' ' '[radio:sendPair]' 'radio send pair _ = _' 'str num' 'light' 10
  spec 'r' '[radio:messageReceived]' 'radio message received?'
  spec 'r' '[radio:receivedInteger]' 'radio last number'
  spec 'r' '[radio:receivedString]' 'radio last string'
  spec ' ' '[radio:setGroup]' 'radio set group _ (0-255)' 'num' 0
  spec ' ' '[radio:setPower]' 'radio set power (0-7) _' 'num' 4
  spec 'r' '_signalStrength' '_radio last signal strength'
  spec 'r' '_radioLastSenderID' '_radio last sender ID'
  spec 'r' '_radioMyID' '_radio my ID'
  spec 'r' '_receivedMessageType' '_radio last message type'
  spec ' ' '_setChannel' '_radio set channel (0-83) _' 'num' 7

to '_radioLastSenderID' {
  return ('[radio:lastMessageID]')
}

to '_radioMyID' {
  return ('[radio:deviceID]')
}

to '_receivedMessageType' {
  return ('[radio:receivedMessageType]')
}

to '_setChannel' channel {
  '[radio:setChannel]' channel
}

to '_signalStrength' {
  return ('[radio:signalStrength]')
}


module Servo Output
author MicroBlocks
version 1 3 
tags servo motor angle rotation position 
description 'Control both positional (angle) and rotational servo motors.
'
variables _servoPin _servoPulseWidth 

  spec ' ' 'setServoAngle' 'set servo _ to _ degrees (-90 to 90)' 'num num' 1 90
  spec ' ' 'setServoSpeed' 'set servo _ to speed _ (-100 to 100)' 'num num' 1 100
  spec ' ' 'stopServo' 'stop servo _' 'num' 1
  spec 'r' '_servoIndex' '_servoIndex _' 'num' 1
  spec ' ' '_servoPulse' '_servoPulse pin _ usecs _' 'num num' 1 1500
  spec ' ' '_servoUpdateLoop' '_servoUpdateLoop'

to '_servoIndex' which {
  if (_servoPin == 0) {
    _servoPin = ('[data:makeList]')
    _servoPulseWidth = ('[data:makeList]')
    sendBroadcast '_servoUpdateLoop'
  }
  local 'i' ('[data:find]' which _servoPin)
  if (i < 0) {
    comment 'Add new pin'
    '[data:addLast]' which _servoPin
    '[data:addLast]' '1500' _servoPulseWidth
    i = (size _servoPin)
  }
  return i
}

to '_servoPulse' pin usecs {
  if (usecs == 0) {
    comment 'Servo stopped; do nothing'
    return 0
  }
  usecs = (maximum 850 (minimum usecs 2150))
  comment 'Split wait into a long wait followed by a wait of <= 30 usecs for greater accuracy'
  local 'endTime' ((microsOp) + usecs)
  digitalWriteOp pin true
  waitMicros (usecs - 30)
  waitMicros (endTime - (microsOp))
  digitalWriteOp pin false
}

to '_servoUpdateLoop' {
  forever {
    if (_servoPin != 0) {
      comment 'If the _servoPin list is not 0, update the servos'
      for i (size _servoPin) {
        local 'pin' (at i _servoPin)
        local 'usecs' (at i _servoPulseWidth)
        if (and (pin >= 0) (usecs != 0)) {
          '_servoPulse' pin usecs
        }
      }
      waitMillis 15
    }
  }
}

to setServoAngle which degrees optionalReverse {
  local 'reversed' false
  if ((pushArgCount) > 2) {
    reversed = optionalReverse
  }
  if reversed {
    degrees = (0 - degrees)
  }
  local 'pulseWidth' (1500 - (10 * degrees))
  if ('[io:hasServo]') {
    '[io:setServo]' which pulseWidth
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth pulseWidth
  }
}

to setServoSpeed which speed optionalReverse {
  local 'reversed' false
  if ((pushArgCount) > 2) {
    reversed = optionalReverse
  }
  if reversed {
    speed = (0 - speed)
  }
  local 'pulseWidth' (1500 - (10 * speed))
  if ((absoluteValue speed) < 2) {
    pulseWidth = 0
  }
  if ('[io:hasServo]') {
    '[io:setServo]' which pulseWidth
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth pulseWidth
  }
}

to stopServo which {
  if ('[io:hasServo]') {
    '[io:setServo]' which 0
  } else {
    atPut ('_servoIndex' which) _servoPulseWidth 0
  }
}

